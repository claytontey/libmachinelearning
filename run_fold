#!/bin/bash

#P1: input directory with datasets
#P2: normalize features? 1 - Yes  0 - No
#P3: number of folds

for file in $1*.opf
do
	echo $file
	opf_fold $file $3 $2

	for ((it = 1; it <= $3; it++))
	do

		aux=0
		cp fold_$it.dat testing.dat
		for ((it2 = 1; it2 <= $3; it2++))
		do
			if [ "$it" -ne "$it2" ]; then
                if [ "$aux" -eq "0" ]; then
                    echo "Primeira entrada"
                    cp fold_$it2.dat tmp.dat
                    aux=1
                else
                    opf_merge fold_$it2.dat tmp.dat
                    mv merged.dat tmp.dat
                fi
			fi
		done
		if [ "$3" -eq "2" ]; then
            mv tmp.dat training.dat
        else
            mv tmp.dat training.dat
		fi

        #executing OPF classifier *****************
        opf_train training.dat
        opf_classify testing.dat
        opf_accuracy testing.dat

		#executing SVM with RBF kernel *****
		./opf2svm training.dat training.svm
		./opf2svm testing.dat testing.svm
		./mysvm training.svm testing.svm 2
		mv testing.svm.predict testing.svm.out
		cp testing.dat testing.svm
		opf_accuracy testing.svm

		#executing SVM with no kernel *****
		./opf2svm training.dat training.svm.no-kernel
		./opf2svm testing.dat testing.svm.no-kernel
		./mysvm training.svm.no-kernel testing.svm.no-kernel -1
		mv testing.svm.no-kernel.predict testing.svm.no-kernel.out
		cp testing.dat testing.svm.no-kernel
		opf_accuracy testing.svm.no-kernel

		#executing SVM with linear kernel *****
		#./opf2svm training.dat training.svm.linear-kernel
		#./opf2svm testing.dat testing.svm.linear-kernel
		#./mysvm training.svm.linear-kernel testing.svm.linear-kernel 0
		#mv testing.svm.linear-kernel.predict testing.svm.linear-kernel.out
		#cp testing.dat testing.svm.linear-kernel
		#opf_accuracy testing.svm.linear-kernel

		#executing SVM with sigmoid kernel *****
		#./opf2svm training.dat training.svm.sigmoid-kernel
		#./opf2svm testing.dat testing.svm.sigmoid-kernel
		#./mysvm training.svm.sigmoid-kernel testing.svm.sigmoid-kernel 3
		#mv testing.svm.sigmoid-kernel.predict testing.svm.sigmoid-kernel.out
		#cp testing.dat testing.svm.sigmoid-kernel
		#opf_accuracy testing.svm.sigmoid-kernel

		#executing ANN-MLP *****
		./opf2ann training.dat training.ann
		./opf2ann testing.dat testing.ann
		./ann-mlp training.ann testing.ann
		mv testing.ann.predict testing.ann.out
		cp testing.dat testing.ann
		opf_accuracy testing.ann

		#executing SOM (Kohonen)
		cp training.dat training.som
		cp testing.dat testing.som
		./kohonen training.som testing.som 100 10
		mv testing.som.predict testing.som.out
		cp testing.dat testing.som
		opf_accuracy testing.som

		#executing kNN
		cp training.dat training.knn
		cp testing.dat testing.knn
		./knn training.knn testing.knn
		mv testing.knn.predict testing.knn.out
		cp testing.dat testing.knn
		opf_accuracy testing.knn

		#executing Bayes
		cp training.dat training.bay
		cp testing.dat testing.bay
		./bayes training.bay testing.bay
		mv testing.bay.predict testing.bay.out
		cp testing.dat testing.bay
		opf_accuracy testing.bay
	done

	rm *.opf *.svm  *.model *.out *.linear-kernel *.no-kernel *.sigmoid-kernel *.ann *.som *.dat *.knn *.bay

	x=$(echo "$3*($3-1)" | bc)

	./statistics testing.dat.acc training.dat.time testing.dat.time $file.opf.stt $x
	./statistics testing.svm.acc training.svm.time testing.svm.time $file.svm.stt $x
	./statistics testing.svm.no-kernel.acc training.svm.no-kernel.time testing.svm.no-kernel.time $file.svm.no-kernel.stt $x
	#./statistics testing.svm.linear-kernel.acc training.svm.linear-kernel.time testing.svm.linear-kernel.time $file.svm.linear-kernel.stt $x
	#./statistics testing.svm.sigmoid-kernel.acc training.svm.sigmoid-kernel.time testing.svm.sigmoid-kernel.time $file.svm.sigmoid-kernel.stt $x
	./statistics testing.ann.acc training.ann.time testing.ann.time $file.ann.stt $x
	./statistics testing.som.acc training.som.time testing.som.time $file.som.stt $x
	./statistics testing.knn.acc training.knn.time testing.knn.time $file.knn.stt $x
	./statistics testing.bay.acc training.bay.time testing.bay.time $file.bay.stt $x

	rm *.time *.acc

done
